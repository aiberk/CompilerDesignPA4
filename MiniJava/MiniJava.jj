/*
 *  %java -classpath javacc.jar javacc MiniJava.jj
 *  %javac MiniJava.java
 *  %java MiniJava
 */

options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(MiniJava)
import syntaxtree.*;
import java.io.*;

public class MiniJava {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException, FileNotFoundException {
    FileReader fileReader = new FileReader("ast_test1.java");
 
    MiniJava parser = new MiniJava(fileReader);
    StatementList s = parser.Program();
    Visitor v1 = new AST_Visitor();
    s.accept(v1, 0);

  }


}

PARSER_END(MiniJava)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
  <CLASS: "class">
  |<EXTENDS: "extends">
  |<PUBLIC: "public">
  |<RETURN: "return">
  |<VOID: "void">
  |<IF: "if">
  |<ELSEIF: "else if">
  |<ELSE: "else">
  |<WHILE: "while">
  |<BREAK: "break">
  |<LABELED: "labeled">
  |<FOREACH: "foreach">
  |<FOR: "for">
  |<SWITCH: "switch">
  |<CASE: "case">
  |<DEFAULT_: "default">
  |<NEW: "new">
  |<NULL: "null">
  |<TRUE: "true">
  |<FALSE: "false">
  |<SUPER: "super">
  |<INSTANCEOF: "instanceof">
  |<ABSTRACT: "abstract">
  |<ASSERT: "assert">
  |<BYTE: "byte">
  |<CATCH: "catch">
  |<CHAR: "char">
  |<CONST: "const">
  |<CONTINUE: "continue">
  |<DOUBLE: "double">
  |<DO: "do">
  |<ENUM: "enum">
  |<FINAL: "final">
  |<FINALLY: "finally">
  |<FLOAT: "float">
  |<GOTO: "goto">
  |<IMPLEMENTS: "implements">
  |<IMPORT: "import">
  |<INTERFACE: "interface">
  |<LONG: "long">
  |<NATIVE: "native">
  |<PACKAGE: "package">
  |<PRIVATE: "private">
  |<PROTECTED: "protected">
  |<SHORT: "short">
  |<STATIC: "static">
  |<STRICTFP: "strictfp">
  |<SYNCHRONIZED: "synchronized">
  |<THROW: "throw">
  |<THROWS: "throws">
  |<TRANSIENT: "transient">
  |<TRY: "try">
  |<VOLATILE: "volatile">
  |<COMMENT: "/*" (~[])* "*/" >
  |<IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])* >
  |<INTEGER: ["1"-"9"](["0"-"9"])* | ["0"] >
  |<CHARACTER: "'"~["'"] "'" >
  |<STRING: "\"" (~["\""])* "\"">
  |<COMMA: ",">
  |<LPAREN: "(">
  |<RPAREN: ")">
  |<LBRACKET: "[">
  |<RBRACKET: "]">
  |<LBRACE: "{">
  |<RBRACE: "}">
  |<COLON: ":">
  |<PLUS_EQUALS: "+=">
  |<MINUS_EQUALS: "-=">
  |<STAR_EQUALS: "*=">
  |<FORWARD_SLASH_EQUALS: "/=">
  |<PERCENT_EQUALS: "%=">
  |<ASSIGNMENT: "=">
  |<INCREMENT: "++">
  |<DECREMENT: "--">
  |<OR: "||">
  |<AND: "&&">
  |<NOT_EQUALS: "!=">
  |<EQUALS: "==">
  |<LE: "<=">
  |<GE: ">=">
  |<LT: "<">
  |<GT: ">">
  |<PLUS: "+">
  |<MINUS: "-">
  |<EXPONENT: "**">
  |<STAR: "*">
  |<FORWARD_SLASH: "/">
  |<PERCENT: "%">
  |<BOOL_NEG: "!">
  |<DOT: ".">
  |<QUESTIONMARK: "?">
  |<SEMICOLON: ";">
}

/* Program Syntax */

StatementList Program():
{StatementList s1;}
{

  s1 = StatementList()
  <EOF>
  {return s1;}
}
StatementList StatementList():
{StatementList s1 = null; Statement s = null;}
{
  (s=Statement() <SEMICOLON> {s1 = new StatementList(s, s1);})*
  {return s1;}
}

Statement Statement():
{Statement s;}
{
  (LOOKAHEAD(4)
  s = Assignment()
  |s = ExpStatement())
  {return s;}
}
void StatementBlock():
{}
{
    ReturnStatement()
    |ClassDeclaration()
    |MethodDeclaration()
    |WhileLoop()
    |ForLoop()
    |CommentIgnore()
    |ForEachLoop()
    |BreakStatement()
    |ContinueStatement()
    |ThrowStatement()
    |IfBlock()
}
void CommentIgnore():
{}
{
    <COMMENT>
}
void ReturnStatement():
{}
{
    <RETURN> {System.out.print("return ");} (ExprVal2())? <SEMICOLON> {System.out.print(";");}
}
void BreakStatement():
{}
{
    <BREAK>{System.out.print("break ");} <SEMICOLON> {System.out.print(";");}
}
void ContinueStatement():
{}
{
    <CONTINUE>{System.out.print("break ");} <SEMICOLON> {System.out.print(";");}
}
void ThrowStatement():
{}
{
    <THROW>{System.out.print("throw ");} ExprVal2() <SEMICOLON> {System.out.print(";");}
}
void IfBlock():
{}
{
    <IF> {System.out.print("if ");} <LPAREN> {System.out.print("( ");} ExprVal2() <RPAREN> {System.out.print(") ");}
    <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");}
    (<ELSEIF> {System.out.print("else if ");} <LPAREN> {System.out.print("( ");} ExprVal2() <RPAREN> {System.out.print(") ");}
    <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");})*
    (<ELSE> {System.out.print("else ");}
    <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");})?


}

void MethodDeclaration():
{Token t;}
{
    (<PUBLIC> {System.out.print("public ");} 
    | <PRIVATE> {System.out.print("private ");}
    | <PROTECTED> {System.out.print("protected ");}) 
    (<STATIC> {System.out.print("static ");})? 
    (<VOID> {System.out.print("void ");} | t=<IDENTIFIER> {System.out.print(t.image+" ");} ) 
    t=<IDENTIFIER> {System.out.print(t.image+" ");} <LPAREN> {System.out.print("(");} (CommaSeparatedSignatureList())? <RPAREN> {System.out.print(")");}
    <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");}
}
void CommaSeparatedSignatureList():
{}
{
    DeclarationIdentifiers() (<COMMA>{System.out.print(",");} DeclarationIdentifiers())*
}
void DeclarationIdentifiers():
{Token t;}
{
    t=<IDENTIFIER> {System.out.print(t.image+" ");} (<LBRACKET>{System.out.print("[");}<RBRACKET>{System.out.print("]");})? t=<IDENTIFIER>{System.out.print(t.image+" ");}
}
void WhileLoop():
{}
{
    <WHILE> {System.out.print("while ");} <LPAREN> {System.out.print("( ");} ExprVal2() <RPAREN> {System.out.print(") ");}
    <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");}
}
void ForLoop():
{}
{
    <FOR> {System.out.print("for ");} <LPAREN> {System.out.print("( ");} ExprVal2() <SEMICOLON> {System.out.print("; ");} ExprVal2() <SEMICOLON> {System.out.print("; ");} ExprVal2() <RPAREN> {System.out.print(") ");} <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");}
}
void ForEachLoop():
{Token t;}
{

    <FOREACH> {System.out.print("for ");} <LPAREN> {System.out.print("( ");} t=<IDENTIFIER> {System.out.print(t.image+" ");} t=<IDENTIFIER> {System.out.print(t.image+" ");} <COLON> {System.out.print(": ");} ExprVal2() <RPAREN> {System.out.print(") ");} <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");}
}

void ClassDeclaration():
{Token t;}
{

    <CLASS> {System.out.print("class ");} t=<IDENTIFIER> {System.out.print(t.image+" ");} (<EXTENDS> {System.out.print("extends ");} ClassExtendsList())?
    <LBRACE> {System.out.print("{");} StatementBlock() <RBRACE> {System.out.print("}");}
}
void ClassExtendsList():
{Token t;}
{
    t=<IDENTIFIER>{System.out.print(t.image+" ");} ClassExtendsListP()
}
void ClassExtendsListP():
{Token t;}
{
    <COMMA> {System.out.print(", ");} t=<IDENTIFIER>{System.out.print(t.image+" ");} ClassExtendsListP()
    |{}
}

Statement ExpStatement():
{Exp e;}
{
  e = ExprVal2()
  {return new ExpStatement(e);}
}

VarDecl TypeDeclaration():
{Token t1, t2; boolean is_array = false;}
{
  t1=<IDENTIFIER>(<LBRACKET><RBRACKET> {is_array = true;})? t2=<IDENTIFIER> <COMMA>
  {return new VarDecl(new Identifier(t1.image), new Identifier(t2.image), is_array);}
}

Statement Assignment():
{Token t1; Exp e1 = null; Exp e2;}
{
    t1=<IDENTIFIER>(<LBRACKET>e1 = ExprVal2()<RBRACKET>)? <ASSIGNMENT> e2 = ExprVal2()
    {
      if (e1 != null){
        return new ArrayAssign(new Identifier(t1.image), e1, e2);
      }
      return new Assign(new Identifier(t1.image), e2);
    }
}
Exp ExprVal2():
{Exp e1; Exp if_true = null; Exp if_false = null;}
{
    e1 = ExprVal3() (<QUESTIONMARK> if_true = ExprVal3() <COLON> if_false = ExprVal2())?
    {
      if (if_true != null){
        return new Inline(e1, if_true, if_false);
      }
      return e1;
    }
}
Exp ExprVal3():
{Exp e1; Exp e2 = null;}
{

    e1 = ExprVal4() (<OR> e2 = ExprVal3())?
    {
      if (e2 != null){
        return new Or(e1, e2);
      }
      return e1;
    }
}
Exp ExprVal4():
{Exp e1; Exp e2 = null;}
{

    e1 = ExprVal8() (<AND> e2 = ExprVal4())?
    {
      if (e2 != null){
        return new And(e1, e2);
      }
      return e1;
    }
}
Exp ExprVal8():
{Exp e1; boolean equals = false; boolean not_equals = false; Exp e2 = null;}
{

    e1 = ExprVal9() ((<EQUALS> {equals = true;} | <NOT_EQUALS> {not_equals = true;}) e2 = ExprVal8())?
    {
      if (e2 != null){
        if (equals){
          return new Equals(e1, e2);
        }
        return new NotEquals(e1, e2);
      }
      return e1;
    }
}
Exp ExprVal9():
{Exp e1; Exp e2 = null; boolean lt = false; boolean le = false; boolean gt = false; boolean ge = false; boolean instf = false;}
{

    e1 = ExprVal11() ((<LT> {lt = true;}  | <LE> {le = true;}| <GT> {gt = true;}| <GE> {ge = true;}| <INSTANCEOF> {instf = true;}) e2 = ExprVal9())?
    {
      if (e2 != null){
        if (lt){
          return new LessThan(e1, e2);
        }
        if (le){
          return new LessThanOrEqual(e1, e2);
        }
        if (gt){
          return new GreaterThan(e1, e2);
        }
        if (ge){
          return new GreaterThanOrEqual(e1, e2);
        }
        return new InstanceOf(e1, e2);
      }
      return e1;
    }
}
Exp ExprVal11():
{Exp e1; Exp e2 = null; boolean plus = false; boolean minus = false;}
{
    e1 = ExprVal12() ((<PLUS> {plus = true;}  | <MINUS> {minus = true;} ) e2 = ExprVal11())?
    {
      if (e2 != null){
        if (plus){
          return new Plus(e1, e2);
        }
        return new Minus(e1, e2);
      }
      return e1;
    }
}
Exp ExprVal12():
{Exp e1; Exp e2 = null; boolean mul = false; boolean div = false; boolean mod = false;}
{

    e1 = ExprVal13__() ((<STAR> {mul = true;} | <FORWARD_SLASH> {div = true;} | <PERCENT> {mod = true;} ) e2 = ExprVal12())?
    {
      if (e2 != null){
        if (mul){
          return new Multiply(e1, e2);
        }
        if (div){
          return new Divide(e1, e2);
        }
        return new Modulo(e1, e2);
      }
      return e1;
    }

}
Exp ExprVal13__():
{Exp e1; Exp e2 = null;}
{
    e1 = ExprVal13() (<EXPONENT> e2 = ExprVal13__())?
    {
      if (e2 != null){
        return new Exponent(e1, e2);
      }
      return e1;
    }
}
Exp ExprVal13():
{Exp e1 = null; Exp e2 = null;}
{
    (<NEW> e2 = ExprVal14()
    | e1 = ExprVal14())
    {
      if (e2 != null){
        return new NewObject(e2);
      }
      return e1;
    }
}
Exp ExprVal14():
{Exp e1 = null; Exp e2 = null;}
{
    (<BOOL_NEG> e2 = ExprVal16()
    | e1 = ExprVal15())
    {
      if (e2 != null){
        return new Not(e2);
      }
      return e1;
    }
}
Exp ExprVal15():
{Exp e1;}
{
    /*ExprVal16() (<INCREMENT> {System.out.print("++");}  | <DECREMENT> {System.out.print("--");} )? */
    e1 = ExprVal16()
    {return e1;}
}
Exp ExprVal16():
{Token t; Exp e1 = null; Exp e2;}
{
    (<LPAREN> e2 = ExprVal2() <RPAREN> e1 = ExprVal16P(new ExpGroup(e2))
    | t=<IDENTIFIER> e1 = ExprVal16P(new IdentifierExp(t.image))
    | e1 = ExprBase())

    {return e1;}
}
Exp ExprVal16P(Exp _e1):
{Token t; Exp e1 = null; Exp e2; ExpList l1 = null;}
{
    
    (<LBRACKET> e2 = ExprVal2() <RBRACKET> e1 = ExprVal16P(new ArrayLookup(_e1, e2))
    |
    <DOT> t=<IDENTIFIER> e1 = ExprVal16P(new Attribute(_e1, new Identifier(t.image)))
    |
    <LPAREN> (l1 = CommaSeparatedExprList())? <RPAREN> e1 = ExprVal16P(new Call(_e1, null, l1))
    |{})
    {
      if (e1 != null){
        return e1;
      }
      return _e1;
    }
}
ExpList CommaSeparatedExprList():
{Exp a, b; ExpList e1;}
{
    a = ExprVal2() {e1 = new ExpList(null, a);} (<COMMA> b = ExprVal2() {e1 = new ExpList(e1, b);})*
    {return e1;}
}

Exp ExprBase():
{Token t; Exp e1;}
{
    t=<STRING> {e1 = new StringExp(t.image); return e1;}
    | t=<INTEGER> {e1 = new IntegerLiteral(Integer.parseInt(t.image)); return e1;}
    | t=<CHARACTER> {e1 = new CharacterExp(t.image); return e1;}
    | t=<NULL>{e1 = new Null(); return e1;}
    | t=<TRUE>{e1 = new True(); return e1;}
    | t=<FALSE>{e1 = new False();return e1;}
}