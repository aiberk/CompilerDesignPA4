/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
import syntaxtree.*;
import java.io.*;

public class MiniJava implements MiniJavaConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException, FileNotFoundException {
    FileReader fileReader = new FileReader("ast_test1.java");

    MiniJava parser = new MiniJava(fileReader);
    StatementList s = parser.Program();
    Visitor v1 = new AST_Visitor();
    s.accept(v1, 0);

  }

/* Program Syntax */
  static final public StatementList Program() throws ParseException {
 StatementList s1;
    s1 = StatementList();
    jj_consume_token(0);
   {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementList StatementList() throws ParseException {
 StatementList s1 = null; Statement s = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case LPAREN:
      case BOOL_NEG:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = Statement();
      jj_consume_token(SEMICOLON);
                              s1 = new StatementList(s, s1);
    }
   {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
 Statement s;
    if (jj_2_1(4)) {
      s = Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case LPAREN:
      case BOOL_NEG:
        s = ExpStatement();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void StatementBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      ReturnStatement();
      break;
    case CLASS:
      ClassDeclaration();
      break;
    case PUBLIC:
    case PRIVATE:
    case PROTECTED:
      MethodDeclaration();
      break;
    case WHILE:
      WhileLoop();
      break;
    case FOR:
      ForLoop();
      break;
    case COMMENT:
      CommentIgnore();
      break;
    case FOREACH:
      ForEachLoop();
      break;
    case BREAK:
      BreakStatement();
      break;
    case CONTINUE:
      ContinueStatement();
      break;
    case THROW:
      ThrowStatement();
      break;
    case IF:
      IfBlock();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CommentIgnore() throws ParseException {
    jj_consume_token(COMMENT);
  }

  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
              System.out.print("return ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case INTEGER:
    case CHARACTER:
    case STRING:
    case LPAREN:
    case BOOL_NEG:
      ExprVal2();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                       System.out.print(";");
  }

  static final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
            System.out.print("break ");
    jj_consume_token(SEMICOLON);
                                                      System.out.print(";");
  }

  static final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
               System.out.print("break ");
    jj_consume_token(SEMICOLON);
                                                         System.out.print(";");
  }

  static final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
            System.out.print("throw ");
    ExprVal2();
    jj_consume_token(SEMICOLON);
                                                                 System.out.print(";");
  }

  static final public void IfBlock() throws ParseException {
    jj_consume_token(IF);
          System.out.print("if ");
    jj_consume_token(LPAREN);
                                              System.out.print("( ");
    ExprVal2();
    jj_consume_token(RPAREN);
                                                                                            System.out.print(") ");
    jj_consume_token(LBRACE);
              System.out.print("{");
    StatementBlock();
    jj_consume_token(RBRACE);
                                                                 System.out.print("}");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(ELSEIF);
               System.out.print("else if ");
      jj_consume_token(LPAREN);
                                                        System.out.print("( ");
      ExprVal2();
      jj_consume_token(RPAREN);
                                                                                                      System.out.print(") ");
      jj_consume_token(LBRACE);
              System.out.print("{");
      StatementBlock();
      jj_consume_token(RBRACE);
                                                                 System.out.print("}");
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
             System.out.print("else ");
      jj_consume_token(LBRACE);
              System.out.print("{");
      StatementBlock();
      jj_consume_token(RBRACE);
                                                                 System.out.print("}");
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void MethodDeclaration() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
               System.out.print("public ");
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                 System.out.print("private ");
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                   System.out.print("protected ");
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
               System.out.print("static ");
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
             System.out.print("void ");
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                                           System.out.print(t.image+" ");
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
                    System.out.print(t.image+" ");
    jj_consume_token(LPAREN);
                                                              System.out.print("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      CommaSeparatedSignatureList();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                                                 System.out.print(")");
    jj_consume_token(LBRACE);
              System.out.print("{");
    StatementBlock();
    jj_consume_token(RBRACE);
                                                                 System.out.print("}");
  }

  static final public void CommaSeparatedSignatureList() throws ParseException {
    DeclarationIdentifiers();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
                                      System.out.print(",");
      DeclarationIdentifiers();
    }
  }

  static final public void DeclarationIdentifiers() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
                    System.out.print(t.image+" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
                                                                System.out.print("[");
      jj_consume_token(RBRACKET);
                                                                                                  System.out.print("]");
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                                                                                                           System.out.print(t.image+" ");
  }

  static final public void WhileLoop() throws ParseException {
    jj_consume_token(WHILE);
             System.out.print("while ");
    jj_consume_token(LPAREN);
                                                    System.out.print("( ");
    ExprVal2();
    jj_consume_token(RPAREN);
                                                                                                  System.out.print(") ");
    jj_consume_token(LBRACE);
              System.out.print("{");
    StatementBlock();
    jj_consume_token(RBRACE);
                                                                 System.out.print("}");
  }

  static final public void ForLoop() throws ParseException {
    jj_consume_token(FOR);
           System.out.print("for ");
    jj_consume_token(LPAREN);
                                                System.out.print("( ");
    ExprVal2();
    jj_consume_token(SEMICOLON);
                                                                                                 System.out.print("; ");
    ExprVal2();
    jj_consume_token(SEMICOLON);
                                                                                                                                                  System.out.print("; ");
    ExprVal2();
    jj_consume_token(RPAREN);
                                                                                                                                                                                                System.out.print(") ");
    jj_consume_token(LBRACE);
                                                                                                                                                                                                                                   System.out.print("{");
    StatementBlock();
    jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                      System.out.print("}");
  }

  static final public void ForEachLoop() throws ParseException {
 Token t;
    jj_consume_token(FOREACH);
               System.out.print("for ");
    jj_consume_token(LPAREN);
                                                    System.out.print("( ");
    t = jj_consume_token(IDENTIFIER);
                                                                                             System.out.print(t.image+" ");
    t = jj_consume_token(IDENTIFIER);
                                                                                                                                             System.out.print(t.image+" ");
    jj_consume_token(COLON);
                                                                                                                                                                                      System.out.print(": ");
    ExprVal2();
    jj_consume_token(RPAREN);
                                                                                                                                                                                                                                    System.out.print(") ");
    jj_consume_token(LBRACE);
                                                                                                                                                                                                                                                                       System.out.print("{");
    StatementBlock();
    jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                          System.out.print("}");
  }

  static final public void ClassDeclaration() throws ParseException {
 Token t;
    jj_consume_token(CLASS);
             System.out.print("class ");
    t = jj_consume_token(IDENTIFIER);
                                                          System.out.print(t.image+" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
                                                                                                      System.out.print("extends ");
      ClassExtendsList();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
              System.out.print("{");
    StatementBlock();
    jj_consume_token(RBRACE);
                                                                 System.out.print("}");
  }

  static final public void ClassExtendsList() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
                   System.out.print(t.image+" ");
    ClassExtendsListP();
  }

  static final public void ClassExtendsListP() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
             System.out.print(", ");
      t = jj_consume_token(IDENTIFIER);
                                                     System.out.print(t.image+" ");
      ClassExtendsListP();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  static final public Statement ExpStatement() throws ParseException {
 Exp e;
    e = ExprVal2();
   {if (true) return new ExpStatement(e);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl TypeDeclaration() throws ParseException {
 Token t1, t2; boolean is_array = false;
    t1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                        is_array = true;
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    t2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
   {if (true) return new VarDecl(new Identifier(t1.image), new Identifier(t2.image), is_array);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Assignment() throws ParseException {
 Token t1; Exp e1 = null; Exp e2;
    t1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      e1 = ExprVal2();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGNMENT);
    e2 = ExprVal2();
      if (e1 != null){
        {if (true) return new ArrayAssign(new Identifier(t1.image), e1, e2);}
      }
      {if (true) return new Assign(new Identifier(t1.image), e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal2() throws ParseException {
 Exp e1; Exp if_true = null; Exp if_false = null;
    e1 = ExprVal3();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTIONMARK:
      jj_consume_token(QUESTIONMARK);
      if_true = ExprVal3();
      jj_consume_token(COLON);
      if_false = ExprVal2();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
      if (if_true != null){
        {if (true) return new Inline(e1, if_true, if_false);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal3() throws ParseException {
 Exp e1; Exp e2 = null;
    e1 = ExprVal4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      e2 = ExprVal3();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
      if (e2 != null){
        {if (true) return new Or(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal4() throws ParseException {
 Exp e1; Exp e2 = null;
    e1 = ExprVal8();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      e2 = ExprVal4();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
      if (e2 != null){
        {if (true) return new And(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal8() throws ParseException {
 Exp e1; boolean equals = false; boolean not_equals = false; Exp e2 = null;
    e1 = ExprVal9();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_EQUALS:
    case EQUALS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
                                equals = true;
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
                                                                not_equals = true;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ExprVal8();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
      if (e2 != null){
        if (equals){
          {if (true) return new Equals(e1, e2);}
        }
        {if (true) return new NotEquals(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal9() throws ParseException {
 Exp e1; Exp e2 = null; boolean lt = false; boolean le = false; boolean gt = false; boolean ge = false; boolean instf = false;
    e1 = ExprVal11();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
    case LE:
    case GE:
    case LT:
    case GT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                             lt = true;
        break;
      case LE:
        jj_consume_token(LE);
                                                  le = true;
        break;
      case GT:
        jj_consume_token(GT);
                                                                     gt = true;
        break;
      case GE:
        jj_consume_token(GE);
                                                                                        ge = true;
        break;
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
                                                                                                                   instf = true;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ExprVal9();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
      if (e2 != null){
        if (lt){
          {if (true) return new LessThan(e1, e2);}
        }
        if (le){
          {if (true) return new LessThanOrEqual(e1, e2);}
        }
        if (gt){
          {if (true) return new GreaterThan(e1, e2);}
        }
        if (ge){
          {if (true) return new GreaterThanOrEqual(e1, e2);}
        }
        {if (true) return new InstanceOf(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal11() throws ParseException {
 Exp e1; Exp e2 = null; boolean plus = false; boolean minus = false;
    e1 = ExprVal12();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                               plus = true;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                         minus = true;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ExprVal11();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
      if (e2 != null){
        if (plus){
          {if (true) return new Plus(e1, e2);}
        }
        {if (true) return new Minus(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal12() throws ParseException {
 Exp e1; Exp e2 = null; boolean mul = false; boolean div = false; boolean mod = false;
    e1 = ExprVal13__();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case FORWARD_SLASH:
    case PERCENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                                 mul = true;
        break;
      case FORWARD_SLASH:
        jj_consume_token(FORWARD_SLASH);
                                                                 div = true;
        break;
      case PERCENT:
        jj_consume_token(PERCENT);
                                                                                           mod = true;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ExprVal12();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
      if (e2 != null){
        if (mul){
          {if (true) return new Multiply(e1, e2);}
        }
        if (div){
          {if (true) return new Divide(e1, e2);}
        }
        {if (true) return new Modulo(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal13__() throws ParseException {
 Exp e1; Exp e2 = null;
    e1 = ExprVal13();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPONENT:
      jj_consume_token(EXPONENT);
      e2 = ExprVal13__();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
      if (e2 != null){
        {if (true) return new Exponent(e1, e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal13() throws ParseException {
 Exp e1 = null; Exp e2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      e2 = ExprVal14();
      break;
    case NULL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case INTEGER:
    case CHARACTER:
    case STRING:
    case LPAREN:
    case BOOL_NEG:
      e1 = ExprVal14();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      if (e2 != null){
        {if (true) return new NewObject(e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal14() throws ParseException {
 Exp e1 = null; Exp e2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL_NEG:
      jj_consume_token(BOOL_NEG);
      e2 = ExprVal16();
      break;
    case NULL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case INTEGER:
    case CHARACTER:
    case STRING:
    case LPAREN:
      e1 = ExprVal15();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      if (e2 != null){
        {if (true) return new Not(e2);}
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal15() throws ParseException {
 Exp e1;
    /*ExprVal16() (<INCREMENT> {System.out.print("++");}  | <DECREMENT> {System.out.print("--");} )? */
        e1 = ExprVal16();
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal16() throws ParseException {
 Token t; Exp e1 = null; Exp e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      e2 = ExprVal2();
      jj_consume_token(RPAREN);
      e1 = ExprVal16P(new ExpGroup(e2));
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      e1 = ExprVal16P(new IdentifierExp(t.image));
      break;
    case NULL:
    case TRUE:
    case FALSE:
    case INTEGER:
    case CHARACTER:
    case STRING:
      e1 = ExprBase();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprVal16P(Exp _e1) throws ParseException {
 Token t; Exp e1 = null; Exp e2; ExpList l1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      e2 = ExprVal2();
      jj_consume_token(RBRACKET);
      e1 = ExprVal16P(new ArrayLookup(_e1, e2));
      break;
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
      e1 = ExprVal16P(new Attribute(_e1, new Identifier(t.image)));
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case LPAREN:
      case BOOL_NEG:
        l1 = CommaSeparatedExprList();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      e1 = ExprVal16P(new Call(_e1, null, l1));
      break;
    default:
      jj_la1[32] = jj_gen;

    }
      if (e1 != null){
        {if (true) return e1;}
      }
      {if (true) return _e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList CommaSeparatedExprList() throws ParseException {
 Exp a, b; ExpList e1;
    a = ExprVal2();
                    e1 = new ExpList(null, a);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      b = ExprVal2();
                                                                         e1 = new ExpList(e1, b);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExprBase() throws ParseException {
 Token t; Exp e1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                e1 = new StringExp(t.image); {if (true) return e1;}
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                   e1 = new IntegerLiteral(Integer.parseInt(t.image)); {if (true) return e1;}
      break;
    case CHARACTER:
      t = jj_consume_token(CHARACTER);
                     e1 = new CharacterExp(t.image); {if (true) return e1;}
      break;
    case NULL:
      t = jj_consume_token(NULL);
               e1 = new Null(); {if (true) return e1;}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
               e1 = new True(); {if (true) return e1;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                e1 = new False();{if (true) return e1;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_57() {
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(PERCENT)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(INSTANCEOF)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(FORWARD_SLASH)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(BOOL_NEG)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(EXPONENT)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(NOT_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e00000,0x1e00000,0x365a0,0x1e00000,0x800,0x1000,0x80,0x0,0x200,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x1e00000,0x1c00000,0x1c00000,0x1e00000,0x0,0x0,0x1c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x78000000,0x78000000,0x4218002,0x78000000,0x0,0x0,0x18000,0x40000,0x8000000,0x8000000,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78000000,0x78000000,0x78000000,0x78000000,0x0,0x80000000,0x70000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20000001,0x20000001,0x0,0x20000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x4,0x80000000,0x8000,0x10000,0x60000,0x60000,0x780000,0x780000,0x1800000,0x1800000,0x1c000000,0x1c000000,0x2000000,0x20000001,0x20000001,0x1,0x20000001,0x40000005,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[97];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 97; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
