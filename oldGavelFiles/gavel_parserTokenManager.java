/* Generated By:JavaCC: Do not edit this line. gavel_parserTokenManager.java */
import java.io.*;

/** Token Manager. */
public class gavel_parserTokenManager implements gavel_parserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000400L) != 0L)
            return 0;
         if ((active0 & 0x3ffffffffffffe0L) != 0L)
         {
            jjmatchedKind = 59;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0xc00000400L) != 0L)
            return 6;
         if ((active0 & 0x3fffff3fffffbe0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x100000000230000L) != 0L)
            return 6;
         if ((active0 & 0x2fffff7ffdcfbe0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0x1110a0c81a00L) != 0L)
            return 6;
         if ((active0 & 0x2ffeee75f15e1e0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x6200e143006020L) != 0L)
            return 6;
         if ((active0 & 0x29dee061c1581c0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x44240410040180L) != 0L)
            return 6;
         if ((active0 & 0x299ca420c118040L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0xc04000118040L) != 0L)
            return 6;
         if ((active0 & 0x2990a020c000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x208000208000000L) != 0L)
            return 6;
         if ((active0 & 0x910a0004000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x81080000000000L) != 0L)
            return 6;
         if ((active0 & 0x10020004000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x20004000000L) != 0L)
            return 6;
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 10;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 37:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 40:
         return jjStopAtPos(0, 64);
      case 41:
         return jjStopAtPos(0, 65);
      case 42:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000200L);
      case 43:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2080L);
      case 44:
         return jjStopAtPos(0, 63);
      case 45:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4100L);
      case 46:
         return jjStopAtPos(0, 94);
      case 47:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 58:
         return jjStopAtPos(0, 70);
      case 59:
         return jjStopAtPos(0, 96);
      case 60:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 61:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 62:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 63:
         return jjStopAtPos(0, 95);
      case 91:
         return jjStopAtPos(0, 66);
      case 93:
         return jjStopAtPos(0, 67);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20004000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3c0080020L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc00100000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000001840L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xe001030000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe0004000400L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000008000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000600000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1c00000000080L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1e000002040000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e0000000800000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000000200L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 68);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 125:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 42:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 43:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 61:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x600041088000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x300100L, active1, 0L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 6);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x62000080002000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000001820L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x81004000000L, active1, 0L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200110700030200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x181800000804000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400080L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000020000000L, active1, 0L);
      case 124:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000080000020L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000042200L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000001400000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10106300000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x3008000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x60002000000L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x68000000010000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c081800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x290060000140L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400800000L);
      case 119:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 6);
         break;
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000e000104000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000040000000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 6);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 6);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 6);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x80012018840L);
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000002080L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 6);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x60040000000000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000020L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x500020c040000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00004010000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000040000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 6);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x1020000000000L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000200000080L);
      case 107:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 6);
         break;
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4400008000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0018000100L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 6);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 6);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 99:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 6);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000010000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 6);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000000800L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000100000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x204000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 6);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 6);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 6);
         break;
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 6);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x80020000000000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 6);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 6);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 121:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 6);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000004000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x90020000000000L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 6);
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 6);
         break;
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 6);
         break;
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 6);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 52, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 48)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(1, 3);
                  break;
               case 1:
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar == 47 && kind > 58)
                     kind = 58;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 48 && kind > 60)
                     kind = 60;
                  break;
               case 10:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 39 && kind > 61)
                     kind = 61;
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(6);
                  break;
               case 11:
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 3, 14, 15, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\154\141\163\163", 
"\145\170\164\145\156\144\163", "\160\165\142\154\151\143", "\162\145\164\165\162\156", "\166\157\151\144", 
"\151\146", "\145\154\163\145\40\151\146", "\145\154\163\145", "\167\150\151\154\145", 
"\142\162\145\141\153", "\154\141\142\145\154\145\144", "\146\157\162\145\141\143\150", 
"\146\157\162", "\163\167\151\164\143\150", "\143\141\163\145", 
"\144\145\146\141\165\154\164", "\156\145\167", "\156\165\154\154", "\164\162\165\145", 
"\146\141\154\163\145", "\163\165\160\145\162", "\151\156\163\164\141\156\143\145\157\146", 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\171\164\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\157\156\163\164", "\143\157\156\164\151\156\165\145", 
"\144\157\165\142\154\145", "\144\157", "\145\156\165\155", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\147\157\164\157", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\164\145\162\146\141\143\145", 
"\154\157\156\147", "\156\141\164\151\166\145", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\163\150\157\162\164", 
"\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\171", "\166\157\154\141\164\151\154\145", null, null, null, null, 
null, "\54", "\50", "\51", "\133", "\135", "\173", "\175", "\72", "\53\75", 
"\55\75", "\52\75", "\57\75", "\45\75", "\75", "\53\53", "\55\55", "\174\174", "\46\46", 
"\41\75", "\75\75", "\74\75", "\76\75", "\74", "\76", "\53", "\55", "\52\52", "\52", 
"\57", "\45", "\41", "\56", "\77", "\73", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x1ffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[16];
static private final int[] jjstateSet = new int[32];
static protected char curChar;
/** Constructor. */
public gavel_parserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public gavel_parserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
