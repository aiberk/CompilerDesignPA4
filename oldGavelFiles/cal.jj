/*
 * This is cal.jj file.
 * Edit this file
 * Edit comment to finde '//"
 * java -classpath javacc.jar javacc cal.jj
 * javac cal.java
 * java cal test.txt
 */

options {
  IGNORE_CASE = false;
}

PARSER_BEGIN(cal)

import java.io.*;

public class cal {

  public static void main(String[] args) throws FileNotFoundException
  {
    if ( args.length < 1 ) {
       System.out.println("Please pass in the filename for a parameter.");
       System.exit(1);
    }

    SimpleCharStream stream = new SimpleCharStream(
                                  new FileInputStream(args[0]),0,0);
    Token temp_token = null;

    calTokenManager TkMgr = new calTokenManager(stream);

    do {
        temp_token = TkMgr.getNextToken();

        switch(temp_token.kind) {
          case COMMENT: System.out.println("COMMENT:    " + temp_token.image);
            break;
          case IDENTIFIER:    System.out.println("IDENTIFIER:    " + temp_token.image);
           break;
          case INTEGER:    System.out.println("INTEGER:    " + temp_token.image);
           break;
          case STRING:    System.out.println("STRING:    " + temp_token.image);
           break;
          case CHARACTER:    System.out.println("STRING:    " + temp_token.image);
           break;
          case CLASS:    System.out.println("CLASS:    " + temp_token.image);
           break;
          case EXTENDS:    System.out.println("EXTENDS:    " + temp_token.image);
            break;
          case PUBLIC:    System.out.println("PUBLIC:    " + temp_token.image);
            break;
          case RETURN:    System.out.println("RETURN:    " + temp_token.image);
            break;
          case BOOLEAN:    System.out.println("BOOLEAN:    " + temp_token.image);
            break;
          case INT:    System.out.println("INT:    " + temp_token.image);
            break;
          case VOID:    System.out.println("VOID:    " + temp_token.image);
            break;
          case IF:    System.out.println("IF:    " + temp_token.image);
            break;
          case ELSE:    System.out.println("ELSE:    " + temp_token.image);
            break;
          case WHILE:    System.out.println("WHILE:    " + temp_token.image);
            break;
          case BREAK:    System.out.println("BREAK:    " + temp_token.image);
            break;
          case LABELED:    System.out.println("LABELED:    " + temp_token.image);
            break;
          case FOR:    System.out.println("FOR:    " + temp_token.image);
            break;
          case SWITCH:    System.out.println("SWITCH:    " + temp_token.image);
            break;
          case CASE:    System.out.println("CASE:    " + temp_token.image);
            break;
          case DEFAULT_:    System.out.println("DEFAULT_:    " + temp_token.image);
            break;
          case NEW:    System.out.println("NEW:    " + temp_token.image);
            break;
          case NULL:    System.out.println("NULL:    " + temp_token.image);
            break;
          case TRUE:    System.out.println("TRUE:    " + temp_token.image);
            break;
          case FALSE:    System.out.println("FALSE:    " + temp_token.image);
            break;
          case THIS:    System.out.println("THIS:    " + temp_token.image);
            break;
          case SUPER:    System.out.println("SUPER:    " + temp_token.image);
            break;
          case INSTANCEOF:    System.out.println("INSTANCEOF:    " + temp_token.image);
           break;
          case ABSTRACT:    System.out.println("ABSTRACT:    " + temp_token.image);
            break;
          case ASSERT:    System.out.println("ASSERT:    " + temp_token.image);
            break;
          case BYTE:    System.out.println("BYTE:    " + temp_token.image);
            break;
          case CATCH:    System.out.println("CATCH:    " + temp_token.image);
            break;
          case CHAR:    System.out.println("CHAR:    " + temp_token.image);
            break;
          case CONST:    System.out.println("CONST:    " + temp_token.image);
            break;
          case CONTINUE:    System.out.println("CONTINUE:    " + temp_token.image);
            break;
          case DO:    System.out.println("DO:    " + temp_token.image);
            break;
          case DOUBLE:    System.out.println("DOUBLE:    " + temp_token.image);
            break;
          case ENUM:    System.out.println("ENUM:    " + temp_token.image);
            break;
          case FINAL:    System.out.println("FINAL:    " + temp_token.image);
            break;
          case FINALLY:    System.out.println("FINALLY:    " + temp_token.image);
            break;
          case FLOAT:    System.out.println("FLOAT:    " + temp_token.image);
            break;
          case GOTO:    System.out.println("GOTO:    " + temp_token.image);
            break;
          case IMPLEMENTS:    System.out.println("IMPLEMENTS:    " + temp_token.image);
            break;
          case IMPORT:    System.out.println("IMPORT:    " + temp_token.image);
            break;
          case INTERFACE:    System.out.println("INTERFACE:    " + temp_token.image);
            break;
          case LONG:    System.out.println("LONG:    " + temp_token.image);
            break;
          case NATIVE:    System.out.println("NATIVE:    " + temp_token.image);
            break;
          case PACKAGE:    System.out.println("PACKAGE:    " + temp_token.image);
            break;
          case PRIVATE:    System.out.println("PRIVATE:    " + temp_token.image);
            break;
          case PROTECTED:    System.out.println("PROTECTED:    " + temp_token.image);
            break;
          case SHORT:    System.out.println("SHORT:    " + temp_token.image);
            break;
          case STATIC:    System.out.println("STATIC:    " + temp_token.image);
            break;
          case STRICTFP:    System.out.println("STRICTFP:    " + temp_token.image);
            break;
          case SYNCHRONIZED:    System.out.println("SYNCHRONIZED:    " + temp_token.image);
            break;
          case THROW:    System.out.println("THROW:    " + temp_token.image);
            break;
          case THROWS:    System.out.println("THROWS:    " + temp_token.image);
            break;
          case TRANSIENT:    System.out.println("TRANSIENT:    " + temp_token.image);
            break;
          case TRY:    System.out.println("TRY:    " + temp_token.image);
            break;
          case VOLATILE:    System.out.println("VOLATILE:    " + temp_token.image);
            break;
          case COMMA:    System.out.println("COMMA:    " + temp_token.image);
            break;
          case LPAREN:    System.out.println("LPAREN:    " + temp_token.image);
            break;
          case RPAREN:    System.out.println("RPAREN:    " + temp_token.image);
            break;
          case LBRACKET:    System.out.println("LBRACKET:    " + temp_token.image);
            break;
          case RBRACKET:    System.out.println("RBRACKET:    " + temp_token.image);
            break;
          case LBRACE:    System.out.println("LBRACE:    " + temp_token.image);
            break;
          case RBRACE:    System.out.println("RBRACE:    " + temp_token.image);
            break;
          case COLON:    System.out.println("COLON:    " + temp_token.image);
            break;
          case ASSIGNMENT:    System.out.println("ASSIGNMENT:    " + temp_token.image);
            break;
          case INCREMENT:    System.out.println("INCREMENT:    " + temp_token.image);
            break;
          case DECREMENT:    System.out.println("DECREMENT:    " + temp_token.image);
            break;
          case OR:    System.out.println("OR:    " + temp_token.image);
            break;
          case AND:    System.out.println("AND:    " + temp_token.image);
            break;
          case EQUALS:    System.out.println("EQUALS:    " + temp_token.image);
            break;
          case LE:    System.out.println("LE:    " + temp_token.image);
            break;
          case GE:    System.out.println("GE:    " + temp_token.image);
            break;
          case LT:    System.out.println("LT:    " + temp_token.image);
            break;
          case GT:    System.out.println("GT:    " + temp_token.image);
            break;
          case PLUS:    System.out.println("PLUS:    " + temp_token.image);
            break;
          case MINUS:    System.out.println("MINUS:    " + temp_token.image);
            break;
          case STAR:    System.out.println("STAR:    " + temp_token.image);
            break;
          case FORWARD_SLASH:    System.out.println("FORWARD_SLASH:    " + temp_token.image);
            break;
          case PERCENT:    System.out.println("PERCENT:    " + temp_token.image);
            break;
          case DOT:    System.out.println("DOT:    " + temp_token.image);
            break;
          case SEMICOLON:    System.out.println("SEMICOLON:    " + temp_token.image);
            break;
         default:
           if ( temp_token.kind != EOF )
             System.out.println("OTHER: " + temp_token.image);
           break;
        }
    } while (temp_token.kind != EOF);
  }
}

PARSER_END(cal)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
  <CLASS: "class">
  |<EXTENDS: "extends">
  |<PUBLIC: "public">
  |<RETURN: "return">
  |<BOOLEAN: "boolean">
  |<INT: "int">
  |<VOID: "void">
  |<IF: "if">
  |<ELSE: "else">
  |<WHILE: "while">
  |<BREAK: "break">
  |<LABELED: "labeled">
  |<FOR: "for">
  |<SWITCH: "switch">
  |<CASE: "case">
  |<DEFAULT_: "default">
  |<NEW: "new">
  |<NULL: "null">
  |<TRUE: "true">
  |<FALSE: "false">
  |<THIS: "this">
  |<SUPER: "super">
  |<INSTANCEOF: "instanceof">
  |<ABSTRACT: "abstract">
  |<ASSERT: "assert">
  |<BYTE: "byte">
  |<CATCH: "catch">
  |<CHAR: "char">
  |<CONST: "const">
  |<CONTINUE: "continue">
  |<DOUBLE: "double">
  |<DO: "do">
  |<ENUM: "enum">
  |<FINAL: "final">
  |<FINALLY: "finally">
  |<FLOAT: "float">
  |<GOTO: "goto">
  |<IMPLEMENTS: "implements">
  |<IMPORT: "import">
  |<INTERFACE: "interface">
  |<LONG: "long">
  |<NATIVE: "native">
  |<PACKAGE: "package">
  |<PRIVATE: "private">
  |<PROTECTED: "protected">
  |<SHORT: "short">
  |<STATIC: "static">
  |<STRICTFP: "strictfp">
  |<SYNCHRONIZED: "synchronized">
  |<THROW: "throw">
  |<THROWS: "throws">
  |<TRANSIENT: "transient">
  |<TRY: "try">
  |<VOLATILE: "volatile">
  |<COMMENT: "/*" (~[])* "*/" >
  |<#LETTER : ["a"-"z", "A"-"Z"] >
  |<#DIGIT : ["0"-"9"] >
  |<#UNDERSCORE : "_">
  |<IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)* >
  |<INTEGER: ["1"-"9"](["0"-"9"])* | "0" ~["0"-"9"] >
  |<CHARACTER: "'"~["'"] "'" >
  |<STRING: "\"" (~["\""])* "\"">
  |<COMMA: ",">
  |<LPAREN: "(">
  |<RPAREN: ")">
  |<LBRACKET: "[">
  |<RBRACKET: "]">
  |<LBRACE: "{">
  |<RBRACE: "}">
  |<COLON: ":">
  |<ASSIGNMENT: "=">
  |<INCREMENT: "++">
  |<DECREMENT: "--">
  |<OR: "||">
  |<AND: "&&">
  |<NOT_EQUALS: "!=">
  |<EQUALS: "==">
  |<LE: "<=">
  |<GE: ">=">
  |<LT: "<">
  |<GT: ">">
  |<PLUS: "+">
  |<MINUS: "-">
  |<EXPONENT: "**">
  |<STAR: "*">
  |<FORWARD_SLASH: "/">
  |<PERCENT: "%">
  |<BOOL_NEG: "!">
  |<DOT: ".">
  |<QUESTIONMARK: "?">
  |<SEMICOLON: ";">
}